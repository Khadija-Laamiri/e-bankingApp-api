type User {
    id: ID!
    firstName: String
    lastName: String
    email: String
    username: String
    # Note: Avoid exposing password in queries for security reasons.
    role: String
    profilePicture: String  # URL/path for the uploaded profile picture
    resetPasswordToken: String
    resetPasswordTokenExpiry: String
    deviceToken: String
    age: Int
    gender: Gender
}

enum Gender {
    F
    H
}

input UserInput {
    firstName: String
    lastName: String
    email: String
    username: String
    password: String  # Used only for input, avoid returning in User type
    role: String
    profilePicture: String  # Path or URL to the profile picture
    deviceToken: String
    age: Int
    gender: Gender
}
input ResetPasswordInput {
    token: String!
    password: String!
}
type Query {
    getUserById(id: ID!): User
    getAllUsers: [User]
    getUserByUsername(username: String!): User
    getUserByEmail(email: String!): User
}

type Mutation {
    createUser(input: UserInput): User
    updateUser(id: ID!, input: UserInput): User
    deleteUser(id: ID!): String
    forgotPassword(email: String!): String
    resetPassword(request: ResetPasswordInput!): String
}
